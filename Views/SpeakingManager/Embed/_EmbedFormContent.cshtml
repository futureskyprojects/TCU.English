@model TCU.English.Models.SpeakingEmbedCombined

<div class="row">
    <small class="form-text text-danger mr-3">@Html.ValidationSummary()</small>
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <div class="row align-items-center">
                    <h2 class="h6 text-uppercase my-auto">Speking Embed</h2>
                </div>
            </div>
            <div class="card-body p-3">
                @Html.HiddenFor(x => x.TestCategory.Id)
                @Html.HiddenFor(x => x.TestCategory.CreatorId)
                @Html.HiddenFor(x => x.TestCategory.CreatedTime)
                @Html.HiddenFor(x => x.TestCategory.UpdatedTime)
                @Html.HiddenFor(x => x.TestCategory.TypeCode)
                @Html.HiddenFor(x => x.TestCategory.Active)
                <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.TypeCode)</small>
                @Html.HiddenFor(x => x.TestCategory.PartId)
                <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.PartId)</small>
                <div class="form-group">
                    @Html.LabelFor(x => x.TestCategory.Name)
                    @Html.TextBoxFor(x => x.TestCategory.Name, new { @placeholder = "Paragraph name", @class = "form-control" })
                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.Name)</small>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.TestCategory.Description)
                    @Html.TextBoxFor(x => x.TestCategory.Description, new { @placeholder = "Paragraph description", @class = "form-control" })
                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.Description)</small>
                </div>

                @*<div class="line"></div>*@

                @* QUESTION *@
                @Html.HiddenFor(x => x.SpeakingEmbed.Id)
                @Html.HiddenFor(x => x.SpeakingEmbed.CreatorId)
                @Html.HiddenFor(x => x.SpeakingEmbed.CreatedTime)
                @Html.HiddenFor(x => x.SpeakingEmbed.UpdatedTime)
                @Html.HiddenFor(x => x.SpeakingEmbed.TestCategoryId)
                @Html.HiddenFor(x => x.SpeakingEmbed.Active)
                <div class="form-group">
                    @Html.LabelFor(x => x.SpeakingEmbed.YoutubeVideo)
                    @Html.TextBoxFor(x => x.SpeakingEmbed.YoutubeVideo, new { id = "YoutubeEmbedAddress", @placeholder = "https://youtube.com/XJyaYUa...", @class = "form-control" })
                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.SpeakingEmbed.YoutubeVideo)</small>
                    <div class="card video-container mt-3">
                        <iframe id="video-embed-player"
                                src="https://www.youtube.com/embed/PR_yVho1Txc?controls=0"
                                frameborder="0"
                                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture">
                        </iframe>
                    </div>
                </div>
                @* END OF QUESTIONS *@

                @*<div class="line"></div>*@

                <div class="form-group">
                    @Html.Label("Transcripts")
                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.WYSIWYGContent)</small>
                    @Html.TextAreaFor(x => x.TestCategory.WYSIWYGContent, new { id = "WYSIWYGContent" })
                </div>
            </div>
        </div>
        <div class="py-5 text-center">
            <button type="submit" class="btn btn-primary">Save changes</button>
        </div>
    </div>
</div>

<script>
    CKEDITOR.replace('WYSIWYGContent');

    function getYoutubeVideoId(address) {
        const idIndext = 5;
        const regex = /https:\/\/((www\.youtube\.com\/watch\?v=)|(youtu\.be\/)|(www\.youtube\.com\/embed\/))(.*?)($|(&))/gm;
        let m = regex.exec(address);
        if (m.length < idIndext) {
            toastr['error']("Invalid video address. The ID of the embedded video cannot be found.");
            return '';
        }

        return m[idIndext];
    }

    $('#YoutubeEmbedAddress').on('change', function () {
        let address = $(this).val();
        if (address.indexOf('https://www.youtube.com') != 0 && address.indexOf('https://youtu.be') != 0) {
            toastr['error']("You have to embed video from youtube");
        }

        let videoId = getYoutubeVideoId(address);
        $('#video-embed-player').attr('src', `https://www.youtube.com/embed/${videoId}`);
        setTimeout(function () {
            console.clear();
        }, 2000);
    });
    setTimeout(function () {
        console.clear();
    }, 2000);
</script>
