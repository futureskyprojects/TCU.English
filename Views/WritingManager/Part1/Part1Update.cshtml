@model TCU.English.Models.WritingPartOne
@{
    string modalId = nameof(TCU.English.Models.WritingPartOne) + "_Update";
    string modalTitle = Model.DefaultSentence ?? "Update for \"Writing Part 1\"";
    string controller = TCU.English.Utils.NameUtils.ControllerName<TCU.English.Controllers.WritingManagerController>();
    string actionName = nameof(TCU.English.Controllers.WritingManagerController.Part1UpdateAjax);
    string errorMsg = "An error occurred during operation, please try again.";

    IEnumerable<TCU.English.Models.TestCategory> testCategories = ViewBag.TestCategories;
    Model.BaseAnswers = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TCU.English.Models.BaseAnswer>>(Model.Answers);

    bool isShowImmediately = ViewBag.IsShowImmediately ?? false;
}

<div id="@modalId" tabindex="-1" role="dialog" aria-labelledby="@(modalId)_label" aria-hidden="true" class="modal fade text-left">
    <div role="document" class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 id="@(modalId)_label" class="modal-title">@Html.Raw(modalTitle)</h4>
                <button type="button" data-dismiss="modal" aria-label="Close" class="close"><span aria-hidden="true">×</span></button>
            </div>
            @*=======================================================*@
            <form asp-controller="@controller" asp-action="@actionName"
                  enctype="multipart/form-data"
                  id="@(modalId)_form"
                  data-ajax="true"
                  data-ajax-method="POST"
                  data-ajax-complete="onComplete"
                  data-ajax-success="onSuccess"
                  data-ajax-begin="onBegin"
                  data-ajax-failure="onFailed">

                @*//========= MODAL BODY =============//*@
                <div class="modal-body">
                    <div id="@(modalId)_body">
                        @Html.HiddenFor(x => x.Id)
                        @Html.HiddenFor(x => x.TestCategoryId)
                        @Html.HiddenFor(x => x.CreatorId)
                        @Html.HiddenFor(x => x.CreatedTime)
                        @Html.HiddenFor(x => x.UpdatedTime)
                        @Html.HiddenFor(x => x.Active)
                        @Html.HiddenFor(x => x.Answers)
                        <div class="form-group">
                            @Html.LabelFor(x => x.DefaultSentence)
                            @Html.TextBoxFor(x => x.DefaultSentence, new { @placeholder = "Default Sentence", @class = "form-control" })
                            <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.DefaultSentence)</small>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.SecondSentence)
                            @Html.TextBoxFor(x => x.SecondSentence, new { @placeholder = "Second Sentence", @class = "form-control" })
                            <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.SecondSentence)</small>
                        </div>

                        <div class="form-group">
                            <label>Select question category</label>
                            <div class="select">
                                @Html.DropDownListFor(x => x.TestCategoryId,
                               new SelectList(testCategories, nameof(TCU.English.Models.TestCategory.Id), nameof(TCU.English.Models.TestCategory.Name)),
                               new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="line"></div>

                        @* REGION FOR CREATE ANSWERS *@
                        <small class="form-text text-danger text-center">@Html.ValidationMessageFor(x => x.Answers)</small>
                        @for (int i = 0; i < Model.BaseAnswers.Count; i++)
                        {
                            <div class="form-group">
                                <label>@Html.Raw($"Answer {i + 1}")</label>
                                <div class="row">
                                    <div class="col-12">
                                        @Html.TextBoxFor(x => x.BaseAnswers[i].AnswerContent, new { @placeholder = "Enter your answer to the question here", @class = "form-control" })
                                        @Html.HiddenFor(x => x.BaseAnswers[i].IsCorrect, new { value = true })
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="line"></div>

                        @* END REGION FOR CREATE ANSWERS *@
                        @Html.Label("Explain for the correct answer")
                        <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.Hint)</small>
                        @Html.TextAreaFor(x => x.Hint, new { id = $"hint_of_ans_{modalId}" })
                        <script>
                                $(document).ready(function () {
                                    if (CKEDITOR.instances['hint_of_ans_@modalId']) {
                                        CKEDITOR.instances['hint_of_ans_@modalId'].destroy();
                                    }
                                    CKEDITOR.replace('hint_of_ans_@modalId');
                                });
                        </script>
                    </div>
                    <div id="@(modalId)_loading">
                        <partial name="__Loading" />
                    </div>
                </div>
                @*//========= END MODAL BODY =============//*@

                @*//========= MODAL FOOTER =============//*@
                <div class="modal-footer">
                    <button type="button" data-dismiss="modal" class="btn btn-secondary">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
                @*//========= END MODAL FOOTER =============//*@
            </form>
            @*@using (Html.BeginForm(nameof(TCU.English.Controllers.TestCategoryController.Create), TCU.English.Utils.NameUtils.ControllerName<TCU.English.Controllers.TestCategoryController>(), FormMethod.Post))
                {
                }*@
            @*=======================================================*@
        </div>
    </div>
</div>

<script type="text/javascript">
    var isShowImmediately = @(isShowImmediately.ToString().ToLower());
    $("#@(modalId)_loading").hide();

    $("#@(modalId)_body").show();

    $("#@(modalId)_loading").hide();


    var onComplete = function () {
        $("#@(modalId)_loading").hide();
        $("#@(modalId)_body").show();
    };
    var onBegin  = function () {
        $("#@(modalId)_loading").show();
        $("#@(modalId)_body").hide();
    };
    var onSuccess = function (data, status, xhr) {
        if (data != undefined && data != null && data.status != undefined && data.status != null && data.message != undefined && data.message != null) {

            if (data.status) {
                toastr["success"](data.message);
                $("#@modalId").hide();
                setTimeout(function () { location.reload(); }, 1000);
            } else {
                toastr["error"](data.message);
            }
            return;
        }
        toastr["error"]("@modalId");
    }
    var onFailed = function (xhr, status, error) {
        toastr["error"]("@errorMsg");
    };

    if (isShowImmediately) {
        $("#@modalId").modal('show');
    }
</script>