@{
    ViewData["Title"] = "Writing Part 1 Manager";
    IEnumerable<TestCategory> testCategories = ViewBag.TestCategories;
    IEnumerable<WritingPartOne> readingPartOnes = ViewBag.Questions;

    string questionType = ViewBag.QuestionType ?? "";
}
<div class="py-5">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <h2 class="h6 text-uppercase my-auto">Categories</h2>
                        <button type="button" data-toggle="modal" data-target="#@nameof(TestCategory)_Create" class="btn btn-primary ml-auto">Add</button>
                    </div>
                </div>
                <div class="card-body p-3">
                    @if (testCategories != null && testCategories.Count() > 0)
                    {
                        for (int i = 0; i < testCategories.Count(); i++)
                        {
                            <div class="card mb-2 bg-hover-gradient-blue no-anchor-style">
                                <div class="card-body p-3">
                                    <div class="row align-items-center flex-row">
                                        <div class="col-10" onclick="window.location.href='@Url.Action(nameof(WritingManagerController.Part1), NameUtils.ControllerName<WritingManagerController>(), new { category = testCategories.ElementAt(i).Id })'">
                                            <p class="mb-0 d-flex align-items-center font-weight-bold"><span>@(i + 1). @Html.Raw(testCategories.ElementAt(i).Name.TrimMax(100)) <sup class="smaller text-gray font-weight-normal">(@Html.Raw(testCategories.ElementAt(i).WritingPartOnes.Count))</sup></span></p>
                                            <small class="text-muted">@Html.Raw(testCategories.ElementAt(i).Description.TrimMax(80))</small>
                                        </div>
                                        <div class="col-2" onclick="testCategoryPopupOptions(@testCategories.ElementAt(i).Id)">
                                            <img src="~/img/3dot.webp" width="18" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @await Component.InvokeAsync(nameof(Pagination), (Pagination)ViewBag.CategoryPagination);
                    }
                    else
                    {
                        <partial name="__EmptyAnimation" />
                    }
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <h2 class="h6 text-uppercase my-auto">Questions: @Html.Raw(questionType)</h2>
                        <button type="button" data-toggle="modal" data-target="#@nameof(WritingPartOne)_Create" class="btn btn-primary ml-auto">Add</button>
                    </div>
                </div>
                <div class="card-body">
                    @if (testCategories != null && readingPartOnes.Count() > 0)
                    {
                        @for (int i = 0; i < readingPartOnes.Count(); i++)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="row align-items-center flex-row">
                                        <div class="col-11">
                                            <p class="mb-0 d-flex align-items-center font-weight-bold"><span><strong class="h5 mb-0">@(i + 1)<sup class="smaller text-gray font-weight-normal">&harr;</sup></strong> @Html.Raw(readingPartOnes.ElementAt(i).DefaultSentence)</span></p>
                                        </div>
                                        <div class="col-1" onclick="displayPopupOptions(@readingPartOnes.ElementAt(i).Id)">
                                            <img src="~/img/3dot.webp" width="18" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @await Component.InvokeAsync(nameof(Pagination), (Pagination)ViewBag.QuestionPagination);
                    }
                    else
                    {
                        <partial name="__EmptyAnimation" />
                    }

                </div>
            </div>
        </div>
    </div>
</div>

@* TEST CATEGORY DIALOG *@
<div id="modal-create-test-category"></div>
<div id="modal-update-test-category"></div>
@* END TEST CATEGORY DIALOG *@

@* READING PART 1 DIALOG *@
<div id="modal-create-writing-part-1-question"></div>
<div id="modal-update-writing-part-1-question"></div>
@* END READING PART 1 DIALOG *@

@section Scripts {
    <script>
        window.onload = function () {
            $("#modal-create-test-category").load("@Url.Action(nameof(TestCategoryController.Create), NameUtils.ControllerName<TestCategoryController>())", {
                "testCategory": @Html.Raw((JsonConvert.SerializeObject(TestCategory.WritingCategory(1))))
            });
            $("#modal-create-writing-part-1-question").load("@Url.Action(nameof(WritingManagerController.Part1Create), NameUtils.ControllerName<WritingManagerController>())");
        };
        function testCategoryPopupOptions(id) {
            $("#modal-update-test-category").empty();
            swal(`What do you want to do with this category?`, {
                icon: "warning",
                dangerMode: true,
                buttons: {
                    confirm: {
                        text: "Delete",
                        value: "remove"
                    },
                    edit: true,
                    cancel: true,
                },
            })
                .then((value) => {
                    switch (value) {

                        case "edit":
                            $("#modal-update-test-category").load(`@Url.Action(nameof(TestCategoryController.Update), NameUtils.ControllerName<TestCategoryController>())/${id}`);
                            break;

                        case "remove":
                            testCategoryDeleteConfirm(id);
                            break;

                        default:
                            // Do no thing
                            break;
                    }
                });
        }
        function testCategoryDeleteConfirm(id) {
            swal({
                title: "Are you sure?",
                text: `Once deleted, this action cannot be undone.`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        fetch(`@Url.Action(nameof(TestCategoryController.Delete), NameUtils.ControllerName<TestCategoryController>())/${id}`, {
                            method: 'DELETE'
                        }).then(function (response) {
                            response.json().then(function (data) {
                                if (data.success) {
                                    swal(`OK! Category has been deleted.`, {
                                        icon: "success",
                                    });
                                    setTimeout(function () { location.reload(); }, 100);
                                } else {
                                    swal(`${data.responseText}`, {
                                        icon: "error",
                                    });
                                }
                            }).catch(function (error) {
                                console.log(error);
                                swal(`Sorry! Category has not been deleted.`, {
                                    icon: "error",
                                });
                            });
                        }).catch(function (error) {
                            console.log(error);
                            swal(`Sorry! Category has not been deleted.`, {
                                icon: "error",
                            });
                        })
                    } else {
                        swal(`Category`, " is safe!");
                    }
                });
        }
        //==============================================================//
        function displayPopupOptions(id) {
            $("#modal-update-test-category").empty();
            swal(`What do you want to do with this question?`, {
                icon: "warning",
                dangerMode: true,
                buttons: {
                    confirm: {
                        text: "Delete",
                        value: "remove"
                    },
                    edit: true,
                    cancel: true,
                },
            })
                .then((value) => {
                    switch (value) {

                        case "edit":
                            $("#modal-update-writing-part-1-question").load(`@Url.Action(nameof(WritingManagerController.Part1Update), NameUtils.ControllerName<WritingManagerController>())/${id}`);
                            break;

                        case "remove":
                            readingPartOneDeleteConfirm(id);
                            break;

                        default:
                            // Do no thing
                            break;
                    }
                });
        }
        function readingPartOneDeleteConfirm(id) {
            swal({
                title: "Are you sure?",
                text: `Once deleted, this action cannot be undone.`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        fetch(`@Url.Action(nameof(WritingManagerController.Part1DeleteAjax), NameUtils.ControllerName<WritingManagerController>())/${id}`, {
                            method: 'DELETE'
                        }).then(function (response) {
                            response.json().then(function (data) {
                                if (data.success) {
                                    swal(`OK! Question has been deleted.`, {
                                        icon: "success",
                                    });
                                    setTimeout(function () { location.reload(); }, 100);
                                } else {
                                    swal(`${data.responseText}`, {
                                        icon: "error",
                                    });
                                }
                            }).catch(function (error) {
                                console.log(error);
                                swal(`Sorry! Question has not been deleted.`, {
                                    icon: "error",
                                });
                            });
                        }).catch(function (error) {
                            console.log(error);
                            swal(`Sorry! Question has not been deleted.`, {
                                icon: "error",
                            });
                        })
                    } else {
                        swal('FINISH', "safe!");
                    }
                });
        }
    </script>
}
