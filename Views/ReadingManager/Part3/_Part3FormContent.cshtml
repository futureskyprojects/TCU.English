@model TCU.English.Models.ReadingCombined
@{
    IEnumerable<TCU.English.Models.TestCategory> testCategories = ViewBag.TestCategories;
}

<div class="row">
    <div class="col-md-7">
        <div class="card">
            <div class="card-header">
                <div class="row align-items-center">
                    <h2 class="h6 text-uppercase my-auto">Paragraph</h2>
                </div>
            </div>
            <div class="card-body p-3">
                @Html.HiddenFor(x => x.TestCategory.Id)
                @Html.HiddenFor(x => x.TestCategory.CreatorId)
                @Html.HiddenFor(x => x.TestCategory.CreatedTime)
                @Html.HiddenFor(x => x.TestCategory.UpdatedTime)
                @Html.HiddenFor(x => x.TestCategory.TypeCode)
                @Html.HiddenFor(x => x.TestCategory.Active)
                <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.TypeCode)</small>
                @Html.HiddenFor(x => x.TestCategory.PartId)
                <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.PartId)</small>
                <div class="form-group">
                    @Html.LabelFor(x => x.TestCategory.Name)
                    @Html.TextBoxFor(x => x.TestCategory.Name, new { @placeholder = "Paragraph name", @class = "form-control" })
                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.Name)</small>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.TestCategory.Description)
                    @Html.TextBoxFor(x => x.TestCategory.Description, new { @placeholder = "Paragraph description", @class = "form-control" })
                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.Description)</small>
                </div>
                <div class="form-group">
                    @Html.LabelFor(x => x.TestCategory.WYSIWYGContent)
                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.WYSIWYGContent)</small>
                    @Html.TextAreaFor(x => x.TestCategory.WYSIWYGContent, new { id = "WYSIWYGContent" })
                </div>
            </div>
        </div>
        <div class="py-5 text-center">
            <button type="submit" class="btn btn-primary">Save changes</button>
        </div>
    </div>
    <div class="col-md-5">
        <small class="form-text text-danger mr-3">@Html.ValidationSummary()</small>
        <div id="accordion">
            @for (int i = 0; i < Model.ReadingPartTwos.Count; i++)
            {
                @Html.HiddenFor(x => x.ReadingPartTwos[i].Id)
                @Html.HiddenFor(x => x.ReadingPartTwos[i].CreatorId)
                @Html.HiddenFor(x => x.ReadingPartTwos[i].CreatedTime)
                @Html.HiddenFor(x => x.ReadingPartTwos[i].UpdatedTime)
                @Html.HiddenFor(x => x.ReadingPartTwos[i].TestCategoryId)
                @Html.HiddenFor(x => x.ReadingPartTwos[i].Active)
                @Html.HiddenFor(x => x.ReadingPartTwos[i].Answers)
                <div class="card mb-2">
                    <div class="card-header" id="headingOne_@i">
                        <div class="row align-items-center">
                            <h2 class="h6 text-uppercase my-auto">Questions @(i+1)</h2>
                            <i class="fa fa-minus ml-auto" aria-hidden="true" data-toggle="collapse" data-target="#collapseOne_@i" aria-expanded="true" aria-controls="collapseOne_@i"></i>
                        </div>
                    </div>
                    <div id="collapseOne_@i" class="collapse" aria-labelledby="headingOne_@i" data-parent="#accordion">
                        <div class="card-body">
                            <div class="form-group">
                                @Html.LabelFor(x => x.ReadingPartTwos[i].QuestionText)
                                @Html.TextBoxFor(x => x.ReadingPartTwos[i].QuestionText, new { @placeholder = "Your question", @class = "form-control" })
                                <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.ReadingPartTwos[i].QuestionText)</small>
                            </div>
                            @*<div class="form-group">
                                    @Html.LabelFor(x => x.ReadingPartTwos[i].Hint)
                                    @Html.TextBoxFor(x => x.ReadingPartTwos[i].Hint, new { @placeholder = "Hint", @class = "form-control" })
                                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.ReadingPartTwos[i].Hint)</small>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(x => x.ReadingPartTwos[i].ExplainLink)
                                    @Html.TextBoxFor(x => x.ReadingPartTwos[i].ExplainLink, new { @placeholder = "Explain Link", @class = "form-control" })
                                    <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.ReadingPartTwos[i].ExplainLink)</small>
                                </div>*@
                            <div class="line"></div>
                            @* REGION FOR CREATE ANSWERS *@
                            <small class="form-text text-danger text-center">@Html.ValidationMessageFor(x => x.ReadingPartTwos[i].AnswerList)</small>
                            @for (int j = 0; j < Model.ReadingPartTwos[i].AnswerList.Count; j++)
                            {
                                string answerAlphapet = ((char)((int)'A' + j)).ToString();
                                <div class="form-group">
                                    <label>@Html.Raw($"Answer {answerAlphapet}")</label>
                                    <div class="row">
                                        <div class="col-11">
                                            @Html.TextBoxFor(x => x.ReadingPartTwos[i].AnswerList[j].AnswerContent, new { @placeholder = "Enter your answer to the question here", @class = "form-control" })
                                            <small class="form-text text-danger text-center">@Html.ValidationMessageFor(x => x.ReadingPartTwos[i].AnswerList[j].AnswerContent)</small>
                                        </div>
                                        <div class="col-1 d-flex align-items-center">
                                            @Html.CheckBoxFor(x => x.ReadingPartTwos[i].AnswerList[j].IsCorrect, new { @groupname = $"group_{i}", @value = Model.ReadingPartTwos[i].AnswerList[j].IsCorrect.ToString().ToLower() })
                                            @*<input type="radio" value="" name="ans-state" id="@Html.Raw($"ans-state-{answerAlphapet}") @Html.Raw(baseAnswer.IsCorrect?" checked":"")" onchange="updateValue()">*@
                                        </div>
                                    </div>
                                </div>
                            }
                            @* END REGION FOR CREATE ANSWERS *@
                            <div class="form-group">
                                @{
                                    string explainId = $"_part_3_form_content_{i}";
                                }
                                @Html.Label("Explain for the correct answer")
                                <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.ReadingPartTwos[i].ExplainLink)</small>
                                @Html.TextAreaFor(x => x.ReadingPartTwos[i].ExplainLink, new { id = explainId })
                                <script>
                                    $(document).ready(function () {
                                        if (CKEDITOR.instances['@Html.Raw(explainId)']) {
                                            CKEDITOR.instances['@Html.Raw(explainId)'].destroy();
                                        }
                                        CKEDITOR.replace('@Html.Raw(explainId)', {
                                            toolbar:
                                                [
                                                    { name: 'basicstyles', items: ['Bold', 'Italic'] },
                                                    { name: 'paragraph', items: ['NumberedList', 'BulletedList'] },
                                                    { name: 'tools', items: ['Maximize', '-', 'About'] }
                                                ]
                                        });
                                    });
                                </script>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    CKEDITOR.replace('WYSIWYGContent');
</script>
<script src="~/js/custom.js"></script>