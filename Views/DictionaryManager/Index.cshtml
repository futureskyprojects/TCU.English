@{
    ViewData["Title"] = "Dictionary Manager";

    IEnumerable<Topic> topics = ViewBag.Topics;
    IEnumerable<Vocabulary> vocabularies = ViewBag.Vocabularies;

    string topicName = ViewBag.TopicName;

    Pagination tp = ViewBag.TopicPagination;
    Pagination vp = ViewBag.VocabularyPagination;
}
<div class="py-5">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <h2 class="h6 text-uppercase my-auto">Topic</h2>
                        <button type="button" data-toggle="modal" data-target="#@nameof(Topic)_Create" class="btn btn-primary ml-auto">Add</button>
                    </div>
                </div>
                <div class="card-body p-3">
                    @if (topics != null && topics.Count() > 0)
                    {
                        for (int i = 0; i < topics.Count(); i++)
                        {
                            <div class="card mb-2 bg-hover-gradient-blue no-anchor-style">
                                <div class="card-body p-3">
                                    <div class="row align-items-center flex-row">
                                        <div class="col-10" onclick="window.location.href='@Url.Action(nameof(DictionaryManagerController.Index), NameUtils.ControllerName<DictionaryManagerController>(), new { topic = topics.ElementAt(i).Id })'">
                                            <p class="mb-0 d-flex align-items-center font-weight-bold"><span>@(i+1). @Html.Raw(topics.ElementAt(i).Name) <sup class="smaller text-gray font-weight-normal"></sup></span></p>
                                        </div>
                                        <div class="col-2" onclick="dictionaryPopupOptions(@topics.ElementAt(i).Id)">
                                            <img src="~/img/3dot.webp" width="18" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @await Component.InvokeAsync(nameof(Pagination), tp)
                    }
                    else
                    {
                        <partial name="__EmptyAnimation" />
                    }
                </div>
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <h2 class="h6 text-uppercase my-auto">Topic: @Html.Raw(topicName)</h2>
                        <button type="button" data-toggle="modal" data-target="#@nameof(Vocabulary)_Create" class="btn btn-primary ml-auto">Add</button>
                    </div>
                </div>
                <div class="card-body">
                    @if (vocabularies != null && vocabularies.Count() > 0)
                    {
                        @for (int i = 0; i < vocabularies.Count(); i++)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="row align-items-center flex-row">
                                        <div class="col-11">
                                            <p class="mb-0 d-flex align-items-center font-weight-bold"><span><strong class="h5 mb-0">@(i+1).<sup class="smaller text-gray font-weight-normal">&harr;</sup></strong> @Html.Raw(vocabularies.ElementAt(i).Word)</span></p>
                                        </div>
                                        <div class="col-1" onclick="displayPopupOptions(@vocabularies.ElementAt(i).Id)">
                                            <img src="~/img/3dot.webp" width="18" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        @await Component.InvokeAsync(nameof(Pagination), vp)
                    }
                    else
                    {
                        <partial name="__EmptyAnimation" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@* TEST CATEGORY DIALOG *@
<div id="modal-create-topic"></div>
<div id="modal-update-topic"></div>
@* END TEST CATEGORY DIALOG *@

@* READING PART 1 DIALOG *@
<div id="modal-create-vocabulary"></div>
<div id="modal-update-vocabulary"></div>
@* END READING PART 1 DIALOG *@

@section Scripts {
    <script>
        window.onload = function () {
            $("#modal-create-topic").load("@Url.Action(nameof(DictionaryManagerController.TopicCreate), NameUtils.ControllerName<DictionaryManagerController>())");
            $("#modal-create-vocabulary").load("@Url.Action(nameof(DictionaryManagerController.VocabularyCreate), NameUtils.ControllerName<DictionaryManagerController>())");
        };
        function dictionaryPopupOptions(id) {
            $("#modal-update-topic").empty();
            swal(`What do you want to do with this topic?`, {
                icon: "warning",
                dangerMode: true,
                buttons: {
                    confirm: {
                        text: "Delete",
                        value: "remove"
                    },
                    edit: true,
                    cancel: true,
                },
            })
                .then((value) => {
                    switch (value) {

                        case "edit":
                            $("#modal-update-topic").load(`@Url.Action(nameof(DictionaryManagerController.TopicUpdate), NameUtils.ControllerName<DictionaryManagerController>())/${id}`);
                            break;

                        case "remove":
                            topicDeleteConfirm(id);
                            break;

                        default:
                            // Do no thing
                            break;
                    }
                });
        }
        function topicDeleteConfirm(id) {
            swal({
                title: "Are you sure?",
                text: `Once deleted, this action cannot be undone.`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        fetch(`@Url.Action(nameof(DictionaryManagerController.TopicDeleteAjax), NameUtils.ControllerName<DictionaryManagerController>())/${id}`, {
                            method: 'DELETE'
                        }).then(function (response) {
                            response.json().then(function (data) {
                                if (data.success) {
                                    swal(`OK! Category has been deleted.`, {
                                        icon: "success",
                                    });
                                    setTimeout(function () { location.reload(); }, 100);
                                } else {
                                    swal(`${data.responseText}`, {
                                        icon: "error",
                                    });
                                }
                            }).catch(function (error) {
                                console.log(error);
                                swal(`Sorry! Category has not been deleted.`, {
                                    icon: "error",
                                });
                            });
                        }).catch(function (error) {
                            console.log(error);
                            swal(`Sorry! Category has not been deleted.`, {
                                icon: "error",
                            });
                        })
                    } else {
                        swal(`Category`, " is safe!");
                    }
                });
        }
        //==============================================================//
        function displayPopupOptions(id) {
            $("#modal-update-topic").empty();
            swal(`What do you want to do with this question?`, {
                icon: "warning",
                dangerMode: true,
                buttons: {
                    confirm: {
                        text: "Delete",
                        value: "remove"
                    },
                    edit: true,
                    cancel: true,
                },
            })
                .then((value) => {
                    switch (value) {

                        case "edit":
                            $("#modal-update-vocabulary").load(`@Url.Action(nameof(DictionaryManagerController.VocabularyUpdate), NameUtils.ControllerName<DictionaryManagerController>())/${id}`);
                            break;

                        case "remove":
                            deleteVocubolaryConfirm(id);
                            break;

                        default:
                            // Do no thing
                            break;
                    }
                });
        }
        function deleteVocubolaryConfirm(id) {
            swal({
                title: "Are you sure?",
                text: `Once deleted, this action cannot be undone.`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        fetch(`@Url.Action(nameof(DictionaryManagerController.VocabularyDeleteAjax), NameUtils.ControllerName<DictionaryManagerController>())/${id}`, {
                            method: 'DELETE'
                        }).then(function (response) {
                            response.json().then(function (data) {
                                if (data.success) {
                                    swal(`OK! Question has been deleted.`, {
                                        icon: "success",
                                    });
                                    setTimeout(function () { location.reload(); }, 100);
                                } else {
                                    swal(`${data.responseText}`, {
                                        icon: "error",
                                    });
                                }
                            }).catch(function (error) {
                                console.log(error);
                                swal(`Sorry! Question has not been deleted.`, {
                                    icon: "error",
                                });
                            });
                        }).catch(function (error) {
                            console.log(error);
                            swal(`Sorry! Question has not been deleted.`, {
                                icon: "error",
                            });
                        })
                    } else {
                        swal('FINISHED', "safe!");
                    }
                });
        }
    </script>
}
