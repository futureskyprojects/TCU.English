@using TCU.English.Utils
@model TCU.English.Models.ListeningBaseCombined
@{
    ViewData["Title"] = "Create Reading Part 4 Question";
    string controller = TCU.English.Utils.NameUtils.ControllerName<TCU.English.Controllers.ListeningManagerController>();
    string actionName = nameof(TCU.English.Controllers.ListeningManagerController.Part1Create);

    IEnumerable<TCU.English.Models.TestCategory> testCategories = ViewBag.TestCategories;
    //IEnumerable<TCU.English.Models.BaseAnswer> testAnswers = TCU.English.Models.BaseAnswer.GetAnswers(Model.Answers) ?? TCU.English.Models.BaseAnswer.Generate(Config.MAX_READING_PART_2_QUESTION);
}
@* ============================ *@

@* ============================ *@
<div class="py-5">
    @using (Html.BeginForm(actionName, controller, FormMethod.Post, new { @enctype = "multipart/form-data" }))
    {
        <div class="row">
            <div class="col-md-7">
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <h2 class="h6 text-uppercase my-auto">Listen part 1 - Question</h2>
                        </div>
                    </div>
                    <div class="card-body p-3">
                        @Html.HiddenFor(x => x.TestCategory.TypeCode)
                        <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.TypeCode)</small>
                        @Html.HiddenFor(x => x.TestCategory.PartId)
                        <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.PartId)</small>
                        <div class="form-group">
                            @Html.LabelFor(x => x.TestCategory.Name)
                            @Html.TextBoxFor(x => x.TestCategory.Name, new { @placeholder = "Name", @class = "form-control" })
                            <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.Name)</small>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.TestCategory.Description)
                            @Html.TextBoxFor(x => x.TestCategory.Description, new { @placeholder = "Description", @class = "form-control" })
                            <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.Description)</small>
                        </div>
                        @*<div class="form-group">
                                @Html.LabelFor(x => x.TestCategory.WYSIWYGContent)
                                <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.TestCategory.WYSIWYGContent)</small>
                                @Html.TextAreaFor(x => x.TestCategory.WYSIWYGContent, new { id = "WYSIWYGContent" })
                            </div>*@
                    </div>
                </div>
                <div class="py-5 text-center">
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </div>
            <div class="col-md-5">
                @if (ViewContext.ViewData.ModelState.Where(x => x.Key == "").Any())
                {
                    <small class="form-text text-danger mr-3">@Html.ValidationSummary()</small>
                }
                <div id="accordion">
                    @for (int i = 0; i < Model.ListeningBaseQuestions.Count; i++)
                    {
                        <div class="card mb-2">
                            <div class="card-header" id="headingOne_@i">
                                <div class="row align-items-center">
                                    <h2 class="h6 text-uppercase my-auto">Questions @(i+1)</h2>
                                    <i class="fa fa-minus ml-auto" aria-hidden="true" data-toggle="collapse" data-target="#collapseOne_@i" aria-expanded="true" aria-controls="collapseOne_@i"></i>
                                </div>
                            </div>
                            <div id="collapseOne_@i" class="collapse show" aria-labelledby="headingOne_@i" data-parent="#accordion">
                                <div class="card-body">
                                    <div class="form-group">
                                        @Html.LabelFor(x => x.ListeningBaseQuestions[i].QuestionText)
                                        @Html.TextBoxFor(x => x.ListeningBaseQuestions[i].QuestionText, new { @placeholder = "Your question", @class = "form-control" })
                                        <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.ListeningBaseQuestions[i].QuestionText)</small>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(x => x.ListeningBaseQuestions[i].Hint)
                                        @Html.TextBoxFor(x => x.ListeningBaseQuestions[i].Hint, new { @placeholder = "Hint", @class = "form-control" })
                                        <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.ListeningBaseQuestions[i].Hint)</small>
                                    </div>
                                    @*<div class="form-group">
                                            @Html.LabelFor(x => x.ListeningBaseQuestions[i].ExplainLink)
                                            @Html.TextBoxFor(x => x.ListeningBaseQuestions[i].ExplainLink, new { @placeholder = "Explain Link", @class = "form-control" })
                                            <small class="form-text text-danger mr-3">@Html.ValidationMessageFor(x => x.ListeningBaseQuestions[i].ExplainLink)</small>
                                        </div>*@
                                    <div class="line"></div>
                                    @* REGION FOR CREATE ANSWERS *@
                                    <small class="form-text text-danger text-center">@Html.ValidationMessageFor(x => x.ListeningBaseQuestions[i].AnswerList)</small>
                                    @for (int j = 0; j < Model.ListeningBaseQuestions[i].AnswerList.Count; j++)
                                    {
                                        string answerAlphapet = ((char)((int)'A' + j)).ToString();
                                        <div class="form-group">
                                            <label>@Html.Raw($"Answer {answerAlphapet}")</label>
                                            <div class="row">
                                                <div class="col-11">
                                                    @Html.HiddenFor(x => x.ListeningBaseQuestions[i].AnswerList[j].AnswerContent, new { id = $"img-q_{i}_ans_{j}" })
                                                    @* Answer Image for Uploader *@
                                                    <div class="form-group">
                                                        <div class="text-center mb-3">
                                                            <img id="answer-image-preview-@i-@j" src="/img/no-image-box.png" alt="Answer Image" class="img-fluid shadow" style="width:320px;">
                                                        </div>
                                                        <div class="text-center">
                                                            <input type="file" name="images" id="answer-image-picker-@i-@j" onchange="ansImagePicked(this, @i, @j)" hidden />
                                                            <button type="button" class="btn btn-info" onclick="$('#answer-image-picker-@i-@j').click();">Select Image</button>
                                                        </div>
                                                    </div>
                                                    @* End Answer Image uploader *@
                                                    <small class="form-text text-danger text-center">@Html.ValidationMessageFor(x => x.ListeningBaseQuestions[i].AnswerList[j].AnswerContent)</small>
                                                </div>
                                                <div class="col-1 d-flex align-items-center">
                                                    @Html.CheckBoxFor(x => x.ListeningBaseQuestions[i].AnswerList[j].IsCorrect, new { @groupname = $"group_{i}", @value = Model.ListeningBaseQuestions[i].AnswerList[j].IsCorrect.ToString().ToLower() })
                                                    @*<input type="radio" value="" name="ans-state" id="@Html.Raw($"ans-state-{answerAlphapet}") @Html.Raw(baseAnswer.IsCorrect?" checked":"")" onchange="updateValue()">*@
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @* END REGION FOR CREATE ANSWERS *@
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

</div>

@section Scripts {
    <script>
        function ansImagePicked(input, i, j) {
            if (input.files && input.files[0]) {
                const file = input.files[0];
                const fileType = file['type'];
                const validImageTypes = ['image/gif', 'image/jpeg', 'image/png'];
                if (!validImageTypes.includes(fileType)) {
                    // invalid file type code goes here.
                    toastr["error"]("Please only select image type for avatar!")
                } else {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $(`#answer-image-preview-${i}-${j}`).attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }
        }
    </script>
}