@model IEnumerable<User>
@{
    ViewData["Title"] = "All Users";
    long totalUsers = ViewBag.AllUserCount ?? -1;
    long totalLearners = ViewBag.AllLearnersCount ?? -1;
    long totalManagers = ViewBag.AllManagersCount ?? -1;
    long totalBlocked = ViewBag.AllBlockedCount ?? -1;

    string type = ViewBag.Type ?? "all";
    string controllerName = NameUtils.ControllerName<UserManagementController>();

    string tableName = ViewBag.TableName ?? "";
    string tableDescription = ViewBag.TableDescription ?? "";
}
<section class="py-5">
    <div class="row">
        <div class="col-xl-3 col-lg-6 mb-4 mb-xl-0 none-a">
            <a class="bg-white shadow roundy p-4 h-100 d-flex align-items-center justify-content-between bg-hover-gradient-gray-400" href="@Url.Action(nameof(UserManagementController.Index),controllerName, new Dictionary<string, string> { { "type","all"} })">
                <div class="flex-grow-1 d-flex align-items-center">
                    <div class="dot mr-3 bg-violet"></div>
                    <div class="text">
                        <h6 class="mb-0">Total users</h6><span class="text-gray">@totalUsers (users)</span>
                    </div>
                </div>
                <div class="icon text-white bg-violet"><i class="fas fa-users"></i></div>
            </a>
        </div>
        <div class="col-xl-3 col-lg-6 mb-4 mb-xl-0 none-a">
            <a class="bg-white shadow roundy p-4 h-100 d-flex align-items-center justify-content-between bg-hover-gradient-gray-400" href="@Url.Action(nameof(UserManagementController.Index),controllerName, new Dictionary<string, string> { { "type","learner"} })">
                <div class="flex-grow-1 d-flex align-items-center">
                    <div class="dot mr-3 bg-green"></div>
                    <div class="text">
                        <h6 class="mb-0">Learners</h6><span class="text-gray">@totalLearners (learners)</span>
                    </div>
                </div>
                <div class="icon text-white bg-green"><i class="fas fa-graduation-cap"></i></div>
            </a>
        </div>
        <div class="col-xl-3 col-lg-6 mb-4 mb-xl-0 none-a">
            <a class="bg-white shadow roundy p-4 h-100 d-flex align-items-center justify-content-between bg-hover-gradient-gray-400" href="@Url.Action(nameof(UserManagementController.Index),controllerName, new Dictionary<string, string> { { "type","manager"} })">
                <div class="flex-grow-1 d-flex align-items-center">
                    <div class="dot mr-3 bg-blue"></div>
                    <div class="text">
                        <h6 class="mb-0">Managers</h6><span class="text-gray">@totalManagers (managers)</span>
                    </div>
                </div>
                <div class="icon text-white bg-blue"><i class="fas fa-user-shield"></i></div>
            </a>
        </div>
        <div class="col-xl-3 col-lg-6 mb-4 mb-xl-0 none-a">
            <a class="bg-white shadow roundy p-4 h-100 d-flex align-items-center justify-content-between bg-hover-gradient-gray-400" href="@Url.Action(nameof(UserManagementController.Index),controllerName, new Dictionary<string, string> { { "type","blocked"} })">
                <div class="flex-grow-1 d-flex align-items-center">
                    <div class="dot mr-3 bg-red"></div>
                    <div class="text">
                        <h6 class="mb-0">Blocked</h6><span class="text-gray">@totalBlocked (blocked)</span>
                    </div>
                </div>
                <div class="icon text-white bg-red"><i class="fas fa-user-slash"></i></div>
            </a>
        </div>
    </div>
</section>
<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6">
                <h6 class="text-uppercase">@Html.Raw(tableName)</h6>
                <p class="text-gray mb-md-0">@Html.Raw(tableDescription)</p>
            </div>
            <div class="col-md-6">
                @using (Html.BeginForm(nameof(UserManagementController.Index), controllerName, FormMethod.Get, new { @class = "form-inline float-md-right" }))
                {
                    <div class="form-group">
                        <label for="inlineFormInputGroup" class="sr-only">Keywords</label>
                        <input id="inlineFormInputGroup" type="text" placeholder="Keywords" class="mr-3 form-control" name="searchKey">
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Search</button>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model == null || Model.Count() <= 0)
        {
            <partial name="__EmptyAnimation" />
        }
        else
        {
            foreach (TCU.English.Models.User user in Model)
            {
                <div href="#" class="message card px-5 py-3 mb-4 bg-hover-gradient-primary no-anchor-style">
                    <div class="row">
                        <div class="col-lg-4 d-flex align-items-center flex-column flex-lg-row text-center text-md-left">
                            <img src="@Html.Raw(user.Avatar)" alt="@Html.Raw($"{user.FirstName} {user.LastName}")" style="max-width: 3rem" class="rounded-circle mr-3 my-2 my-lg-0 top-avatar" onerror="this.onerror=null; this.src='/img/no_avatar.png'">
                            <h6 class="mb-0" style="font-family: Tahoma">@Html.Raw($"{user.FirstName} {user.LastName}")</h6>
                        </div>
                        <div class="col-lg-4 d-flex align-items-center flex-column flex-lg-row text-center text-md-left">
                            <div class="bg-gray-100 roundy px-4 py-1 mr-0 mr-lg-3 mt-2 mt-lg-0 text-dark exclode float-lg-left">
                                @user.DisplayFirstUserType()
                            </div>
                        </div>
                        <div class="col-lg-4 d-flex align-items-center flex-column flex-lg-row text-center text-md-left">
                            <a href="@Url.Action(nameof(UserManagementController.UpdateUser), NameUtils.ControllerName<UserManagementController>(), new { id = user.Id })" class="btn btn-warning float-lg-right ml-lg-auto text-white">Edit</a>
                            <button type="button" class="btn btn-red float-lg-right ml-2" onclick="deleteConfirm(@user.Id, '@Html.Raw($"{user.FirstName} {user.LastName}")')">Delete</button>
                        </div>
                    </div>
                </div>
            }
            @await Component.InvokeAsync(nameof(Pagination), (Pagination)ViewBag.Pagination);
        }
    </div>
</div>

@section Scripts {
    <script>
        function deleteConfirm(userId, userFullname) {
            swal({
                title: "Are you sure?",
                text: `Once deleted, you will not be able to recover account of "${userFullname}"`,
                icon: "warning",
                buttons: true,
                dangerMode: true,
            })
                .then((willDelete) => {
                    if (willDelete) {
                        fetch(`@Url.Action(nameof(UserManagementController.Delete), NameUtils.ControllerName<UserManagementController>())/${userId}`, {
                            method: 'DELETE'
                        }).then(function (response) {
                            response.json().then(function (data) {
                                if (data.success) {
                                    swal(`OK! '${userFullname}' account has been deleted.`, {
                                        icon: "success",
                                    });
                                    setTimeout(function () { location.reload(); }, 100);
                                } else {
                                    swal(`${data.responseText}`, {
                                        icon: "error",
                                    });
                                }
                            }).catch(function (error) {
                                console.log(error);
                                swal(`Sorry! '${userFullname}' account has not been deleted.`, {
                                    icon: "error",
                                });
                            });
                        }).catch(function (error) {
                            console.log(error);
                            swal(`Sorry! '${userFullname}' account has not been deleted.`, {
                                icon: "error",
                            });
                        })
                    } else {
                        swal(`${userFullname}'s`, "Account is safe!");
                    }
                });
        }
    </script>
}